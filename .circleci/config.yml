version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<< parameters.workflow_id >>


      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<< parameters.workflow_id >>
  create-dotenv:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"  



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: | 
              cd backend
              npm install
              npm run migrations:revert
            


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
               
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist



  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
     
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
   

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force




  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Gzip and Tar
          command: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: | 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
             
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            
            aws ec2 describe-instances  \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"





  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["53:62:38:d9:08:01:da:e4:83:01:6c:76:b9:81:c9:de"]
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: .
      - run:
          name: Install ansible
          command: |
            apk add --update ansible 

      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
      
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - aws-cli/setup:
          profile-name: default
      - create-dotenv
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "DB migration was successful, will update kvdb..."
              curl --insecure https://kvdb.io/3RZvFWwrc5J93cjMYDYFxR/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker: 
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Get backend url
          command: |
            cd frontend
            BACKEND_IP=$(aws ec2 describe-instances  \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects to s3
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}





workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]